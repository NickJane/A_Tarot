//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM 关系源元数据

[assembly: EdmRelationshipAttribute("TarotModel", "FK_MyTaskParameter_MyTask", "MyTask", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TarotWindService.MyTask), "MyTaskParameter", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TarotWindService.MyTaskParameter), true)]

#endregion

namespace TarotWindService
{
    #region 上下文
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    public partial class TarotEntities : ObjectContext
    {
        #region 构造函数
    
        /// <summary>
        /// 请使用应用程序配置文件的“TarotEntities”部分中的连接字符串初始化新 TarotEntities 对象。
        /// </summary>
        public TarotEntities() : base("name=TarotEntities", "TarotEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 TarotEntities 对象。
        /// </summary>
        public TarotEntities(string connectionString) : base(connectionString, "TarotEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 TarotEntities 对象。
        /// </summary>
        public TarotEntities(EntityConnection connection) : base(connection, "TarotEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region 分部方法
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet 属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<MyTask> MyTask
        {
            get
            {
                if ((_MyTask == null))
                {
                    _MyTask = base.CreateObjectSet<MyTask>("MyTask");
                }
                return _MyTask;
            }
        }
        private ObjectSet<MyTask> _MyTask;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<MyTaskParameter> MyTaskParameter
        {
            get
            {
                if ((_MyTaskParameter == null))
                {
                    _MyTaskParameter = base.CreateObjectSet<MyTaskParameter>("MyTaskParameter");
                }
                return _MyTaskParameter;
            }
        }
        private ObjectSet<MyTaskParameter> _MyTaskParameter;

        #endregion
        #region AddTo 方法
    
        /// <summary>
        /// 用于向 MyTask EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToMyTask(MyTask myTask)
        {
            base.AddObject("MyTask", myTask);
        }
    
        /// <summary>
        /// 用于向 MyTaskParameter EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToMyTaskParameter(MyTaskParameter myTaskParameter)
        {
            base.AddObject("MyTaskParameter", myTaskParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region 实体
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TarotModel", Name="MyTask")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MyTask : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 MyTask 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        public static MyTask CreateMyTask(global::System.Int32 id)
        {
            MyTask myTask = new MyTask();
            myTask.ID = id;
            return myTask;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ClassPath
        {
            get
            {
                return _ClassPath;
            }
            set
            {
                OnClassPathChanging(value);
                ReportPropertyChanging("ClassPath");
                _ClassPath = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ClassPath");
                OnClassPathChanged();
            }
        }
        private global::System.String _ClassPath;
        partial void OnClassPathChanging(global::System.String value);
        partial void OnClassPathChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> LastRunTime
        {
            get
            {
                return _LastRunTime;
            }
            set
            {
                OnLastRunTimeChanging(value);
                ReportPropertyChanging("LastRunTime");
                _LastRunTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastRunTime");
                OnLastRunTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _LastRunTime;
        partial void OnLastRunTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnLastRunTimeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> NextRunTime
        {
            get
            {
                return _NextRunTime;
            }
            set
            {
                OnNextRunTimeChanging(value);
                ReportPropertyChanging("NextRunTime");
                _NextRunTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NextRunTime");
                OnNextRunTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _NextRunTime;
        partial void OnNextRunTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnNextRunTimeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Interval
        {
            get
            {
                return _Interval;
            }
            set
            {
                OnIntervalChanging(value);
                ReportPropertyChanging("Interval");
                _Interval = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Interval");
                OnIntervalChanged();
            }
        }
        private Nullable<global::System.Int32> _Interval;
        partial void OnIntervalChanging(Nullable<global::System.Int32> value);
        partial void OnIntervalChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> IntervalType
        {
            get
            {
                return _IntervalType;
            }
            set
            {
                OnIntervalTypeChanging(value);
                ReportPropertyChanging("IntervalType");
                _IntervalType = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IntervalType");
                OnIntervalTypeChanged();
            }
        }
        private Nullable<global::System.Int32> _IntervalType;
        partial void OnIntervalTypeChanging(Nullable<global::System.Int32> value);
        partial void OnIntervalTypeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> enable
        {
            get
            {
                return _enable;
            }
            set
            {
                OnenableChanging(value);
                ReportPropertyChanging("enable");
                _enable = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("enable");
                OnenableChanged();
            }
        }
        private Nullable<global::System.Boolean> _enable;
        partial void OnenableChanging(Nullable<global::System.Boolean> value);
        partial void OnenableChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ApplicationID
        {
            get
            {
                return _ApplicationID;
            }
            set
            {
                OnApplicationIDChanging(value);
                ReportPropertyChanging("ApplicationID");
                _ApplicationID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ApplicationID");
                OnApplicationIDChanged();
            }
        }
        private Nullable<global::System.Int32> _ApplicationID;
        partial void OnApplicationIDChanging(Nullable<global::System.Int32> value);
        partial void OnApplicationIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> TryAgainTimes
        {
            get
            {
                return _TryAgainTimes;
            }
            set
            {
                OnTryAgainTimesChanging(value);
                ReportPropertyChanging("TryAgainTimes");
                _TryAgainTimes = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TryAgainTimes");
                OnTryAgainTimesChanged();
            }
        }
        private Nullable<global::System.Int32> _TryAgainTimes;
        partial void OnTryAgainTimesChanging(Nullable<global::System.Int32> value);
        partial void OnTryAgainTimesChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TarotModel", "FK_MyTaskParameter_MyTask", "MyTaskParameter")]
        public EntityCollection<MyTaskParameter> MyTaskParameter
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MyTaskParameter>("TarotModel.FK_MyTaskParameter_MyTask", "MyTaskParameter");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MyTaskParameter>("TarotModel.FK_MyTaskParameter_MyTask", "MyTaskParameter", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TarotModel", Name="MyTaskParameter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MyTaskParameter : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 MyTaskParameter 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="taskID">TaskID 属性的初始值。</param>
        /// <param name="parmKey">ParmKey 属性的初始值。</param>
        /// <param name="parmValue">ParmValue 属性的初始值。</param>
        public static MyTaskParameter CreateMyTaskParameter(global::System.Int32 id, global::System.Int32 taskID, global::System.String parmKey, global::System.String parmValue)
        {
            MyTaskParameter myTaskParameter = new MyTaskParameter();
            myTaskParameter.ID = id;
            myTaskParameter.TaskID = taskID;
            myTaskParameter.ParmKey = parmKey;
            myTaskParameter.ParmValue = parmValue;
            return myTaskParameter;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TaskID
        {
            get
            {
                return _TaskID;
            }
            set
            {
                OnTaskIDChanging(value);
                ReportPropertyChanging("TaskID");
                _TaskID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TaskID");
                OnTaskIDChanged();
            }
        }
        private global::System.Int32 _TaskID;
        partial void OnTaskIDChanging(global::System.Int32 value);
        partial void OnTaskIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ParmKey
        {
            get
            {
                return _ParmKey;
            }
            set
            {
                OnParmKeyChanging(value);
                ReportPropertyChanging("ParmKey");
                _ParmKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ParmKey");
                OnParmKeyChanged();
            }
        }
        private global::System.String _ParmKey;
        partial void OnParmKeyChanging(global::System.String value);
        partial void OnParmKeyChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ParmValue
        {
            get
            {
                return _ParmValue;
            }
            set
            {
                OnParmValueChanging(value);
                ReportPropertyChanging("ParmValue");
                _ParmValue = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ParmValue");
                OnParmValueChanged();
            }
        }
        private global::System.String _ParmValue;
        partial void OnParmValueChanging(global::System.String value);
        partial void OnParmValueChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TarotModel", "FK_MyTaskParameter_MyTask", "MyTask")]
        public MyTask MyTask
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MyTask>("TarotModel.FK_MyTaskParameter_MyTask", "MyTask").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MyTask>("TarotModel.FK_MyTaskParameter_MyTask", "MyTask").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MyTask> MyTaskReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MyTask>("TarotModel.FK_MyTaskParameter_MyTask", "MyTask");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MyTask>("TarotModel.FK_MyTaskParameter_MyTask", "MyTask", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
